<?php
// src/AppBundle/Repository/ScoreRepository.php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ScoreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScoreRepository extends EntityRepository
{
	public function getScoresAll() {
	
		$qb = $this->createQueryBuilder ( 'e' )
		->select ( 'e' )
		->addOrderBy ( 'e.title', 'ASC' )
		;
	
		return $qb->getQuery ()->getResult ();
	}
	
	public function getScoresAllQB() {
	
		$qb = $this->createQueryBuilder ( 'e' )
		->select ( 'e' )
		->addOrderBy ( 'e.title', 'ASC' )
		;
	
		return $qb;
	}
	
	public function getScoreByQuizAll($qid=null,$limit=null, $sort='DESC') {
	
		$qb = $this->createQueryBuilder ( 'e' )
		->select('e')
		->where('e.quiz = :quiz')
		->setParameter('quiz', $qid)
		->addOrderBy ( 'e.score', $sort )
		;
		
		if (false === is_null ( $limit ))
			$qb->setMaxResults ( $limit );
	
		return $qb->getQuery ()->getResult ();
	}
	
	public function getScoreByQuizAllCount($qid=null) {
	
		$qb = $this->createQueryBuilder ( 'e' )
		->select('COUNT(e)')
		->where('e.quiz = :quiz')
		->setParameter('quiz', $qid)
		;
		return $qb->getQuery ()->getSingleScalarResult ();
	}
	
	public function getScoreByQuizAllPos($qid=null, $score) {
	
		$qb = $this->createQueryBuilder ( 'e' )
		->select('COUNT(DISTINCT(e.score))')
		->where('e.quiz = :quiz')
		->andWhere('e.score >= :score')
		->setParameter('quiz', $qid)
		->setParameter('score', $score)
		;
		return $qb->getQuery ()->getSingleScalarResult ();
	}
	
	public function getScoreByQuizAllMoreScore($qid=null,$score,$limit=null) {
	
		$qb = $this->createQueryBuilder ( 'e' )
		->select('e')
		->where('e.quiz = :quiz')
		->andWhere('e.score > :score')
		->setParameter('quiz', $qid)
		->setParameter('score', $score)
		->addOrderBy ( 'e.score', 'ASC' )
		;
	
		if (false === is_null ( $limit ))
			$qb->setMaxResults ( $limit );
	
		return $qb->getQuery ()->getResult ();
	}
	
	public function getScoreByQuizAllLessScore($qid=null,$score,$limit=null) {
	
		$qb = $this->createQueryBuilder ( 'e' )
		->select('e')
		->where('e.quiz = :quiz')
		->andWhere('e.score < :score')
		->setParameter('quiz', $qid)
		->setParameter('score', $score)
		->addOrderBy ( 'e.score', 'DESC' )
		;
	
		if (false === is_null ( $limit ))
			$qb->setMaxResults ( $limit );
	
		return $qb->getQuery ()->getResult ();
	}
	
	
	
	
	
	
	// public function getScoreByQuizYM($qid=null,$m,$limit=null, $sort='DESC') {
	
	// 	$qb = $this->createQueryBuilder ( 'e' )
	// 	->select('e')
	// 	->where('e.quiz = :quiz')
	// 	->andWhere('e.updated >= :m')
	// 	->setParameter('quiz', $qid)
	// 	->setParameter('m', $m)
	// 	->addOrderBy ( 'e.score', $sort )
	// 	;
	
	// 	if (false === is_null ( $limit ))
	// 		$qb->setMaxResults ( $limit );
	
	// 	return $qb->getQuery ()->getResult ();
	// }
	
	// public function getScoreByQuizYMCount($qid=null,$m) {
	
	// 	$qb = $this->createQueryBuilder ( 'e' )
	// 	->select('COUNT(e)')
	// 	->where('e.quiz = :quiz')
	// 	->andWhere('e.updated >= :m')
	// 	->setParameter('quiz', $qid)
	// 	->setParameter('m', $m)
	// 	;
	
	
	// 	return $qb->getQuery ()->getSingleScalarResult ();
	// }
	
	// public function getScoreByQuizYMPos($qid=null,$m, $score) {
	
	// 	$qb = $this->createQueryBuilder ( 'e' )
	// 	->select('COUNT(e)')
	// 	->where('e.quiz = :quiz')
	// 	->andWhere('e.updated >= :m')
	// 	->andWhere('e.score >= :score')
	// 	->setParameter('quiz', $qid)
	// 	->setParameter('m', $m)
	// 	->setParameter('score', $score)
	// 	;
	
	
	// 	return $qb->getQuery ()->getSingleScalarResult ();
	// }
	
	// public function getScoreByQuizYMMoreScore($qid=null,$m,$score,$limit=null) {
	
	// 	$qb = $this->createQueryBuilder ( 'e' )
	// 	->select('e')
	// 	->where('e.quiz = :quiz')
	// 	->andWhere('e.updated >= :m')
	// 	->andWhere('e.score > :score')
	// 	->setParameter('quiz', $qid)
	// 	->setParameter('m', $m)
	// 	->setParameter('score', $score)
	// 	->addOrderBy ( 'e.score', 'ASC' )
	// 	;
	
	// 	if (false === is_null ( $limit ))
	// 		$qb->setMaxResults ( $limit );
	
	// 	return $qb->getQuery ()->getResult ();
	// }
	
	// public function getScoreByQuizYMLessScore($qid=null,$m,$score,$limit=null) {
	
	// 	$qb = $this->createQueryBuilder ( 'e' )
	// 	->select('e')
	// 	->where('e.quiz = :quiz')
	// 	->andWhere('e.updated >= :m')
	// 	->andWhere('e.score < :score')
	// 	->setParameter('quiz', $qid)
	// 	->setParameter('m', $m)
	// 	->setParameter('score', $score)
	// 	->addOrderBy ( 'e.score', 'DESC' )
	// 	;
	
	// 	if (false === is_null ( $limit ))
	// 		$qb->setMaxResults ( $limit );
	
	// 	return $qb->getQuery ()->getResult ();
	// }
}